<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>com.stephancasas.Clockify</string>
	<key>category</key>
	<string>Tools</string>
	<key>connections</key>
	<dict>
		<key>48B7B2A7-399C-4114-85B9-D89B08E8E27B</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>86275DEB-9881-46D9-8BB9-5D48C404F80F</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>4DB423FF-D11A-45B7-AF47-8075153B6ED6</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>C7631B59-59C5-48D7-BDCD-CE281244A310</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>86275DEB-9881-46D9-8BB9-5D48C404F80F</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>C7631B59-59C5-48D7-BDCD-CE281244A310</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>C7631B59-59C5-48D7-BDCD-CE281244A310</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>7126AC35-6A8B-4814-9C32-C4B62778DBFD</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>F01458AD-724F-400B-870E-C150BEF7A65B</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>1BFA983B-0DAA-48E8-B7FC-4D6F31ACC952</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>Stephan Casas</string>
	<key>description</key>
	<string>Start and stop/categorize Clockify time entries.</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>Clockify</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>externaltriggerid</key>
				<string>main</string>
				<key>passinputasargument</key>
				<false/>
				<key>passvariables</key>
				<true/>
				<key>workflowbundleid</key>
				<string>self</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.callexternaltrigger</string>
			<key>uid</key>
			<string>7126AC35-6A8B-4814-9C32-C4B62778DBFD</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<true/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<true/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>68</integer>
				<key>keyword</key>
				<string>clockify</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<true/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string></string>
				<key>script</key>
				<string>function run(argv) {
  const app = Application.currentApplication();
  app.includeStandardAdditions = true;

  const env = (key) =&gt; app.systemAttribute(`${key}`) || '';

  const makeActivityItem = (title, subtitle, arg, valid = true) =&gt; ({
    title,
    subtitle,
    arg,
    valid
  });

  const items = (items) =&gt; JSON.stringify({ items });

  const DEFAULT_ITEMS = [
    makeActivityItem(
      'Start',
      'Start a new Clockify time entry.',
      'create_time_entry'
    ),
    makeActivityItem(
      'Stop',
      'End the currently-ongoing clockify time entry.',
      'pick_client'
    ),
    makeActivityItem(
      'Discard',
      'Discard the currently-ongoing clockify time entry.',
      'discard_timer'
    )
  ];

  const SETUP_API_KEY_ITEMS = [
    makeActivityItem(
      'Set API Key to Continue',
      'Define the Clockify API key environment variable to continue.',
      'install_api_key',
      false
    )
  ];

  const SETUP_USER_ID_ITEMS = [
    makeActivityItem(
      'Setup User Account',
      'End the currently-ongoing clockify time entry.',
      'install_user_id'
    )
  ];

  const SETUP_WORKSPACE_ID_ITEMS = [
    makeActivityItem(
      'Choose Workspace',
      'Define the Clockify workspace ID to use',
      'install_workspace_id'
    )
  ];

  if (!env('clockify_api_key')) return items(SETUP_API_KEY_ITEMS);
  if (!env('clockify_user_id')) return items(SETUP_USER_ID_ITEMS);
  if (!env('clockify_workspace_id')) return items(SETUP_WORKSPACE_ID_ITEMS);

  return items(DEFAULT_ITEMS);
}
</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string></string>
				<key>title</key>
				<string>Clockify</string>
				<key>type</key>
				<integer>7</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>48B7B2A7-399C-4114-85B9-D89B08E8E27B</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<false/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>68</integer>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<true/>
				<key>queuedelaymode</key>
				<integer>1</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string></string>
				<key>script</key>
				<string>function run(argv) {
  const QUERY = argv[0];

  const app = Application.currentApplication();
  app.includeStandardAdditions = true;

  // api vars and secrets
  const CLOCKIFY_BASE_URL = 'https://api.clockify.me/api/v1';
  const CLOCKIFY_API_KEY = app.systemAttribute('clockify_api_key');
  const CLOCKIFY_WORKSPACE_ID = app.systemAttribute('clockify_workspace_id');
  const CLOCKIFY_USER_ID = app.systemAttribute('clockify_user_id');

  // cache setup
  const CACHE_DIR = app.systemAttribute('alfred_workflow_cache');
  const CACHE_EXTEN = 'alfredcache';

  const Util = {
    shellEncode: (data) =&gt; {
      if (typeof data === 'object') data = JSON.stringify(data);
      return [...data].map((char) =&gt; char.charCodeAt(0)).join(' ');
    },

    shellDecode: (data) =&gt; {
      data = String.fromCharCode(...data.split(/\s/g));
      try {
        data = JSON.parse(data);
      } catch (ex) {}
      return data;
    },

    readCache: (key) =&gt; {
      try {
        const data = app.doShellScript(`\
            curl --location \
            --request GET 'file://${CACHE_DIR}/${key}.${CACHE_EXTEN}'`);
        return Util.shellDecode(data);
      } catch (ex) {
        return '';
      }
    },
    writeCache: (key, value) =&gt; {
      app.doShellScript(
        `mkdir -p "${CACHE_DIR}"; \
          printf "${Util.shellEncode(
            value,
          )}" &gt; "${CACHE_DIR}/${key}.${CACHE_EXTEN}";`,
      );
      return value;
    },
  };

  const Clockify = () =&gt; {
    const getUser = () =&gt; {
      const res =
        app.doShellScript(`curl --location --request GET '${CLOCKIFY_BASE_URL}/user' \
      --header 'Cache-Control: no-cache' \
      --header 'Accept: application/json' \
      --header 'X-Api-Key: ${CLOCKIFY_API_KEY}'`);

      return JSON.parse(res);
    };

    const getWorkspaces = (refresh = false) =&gt; {
      let res = Util.readCache('workspaces');

      if (refresh || !res) {
        res =
          app.doShellScript(`curl --location --request GET '${CLOCKIFY_BASE_URL}/workspaces' \
      --header 'Cache-Control: no-cache' \
      --header 'Accept: application/json' \
      --header 'X-Api-Key: ${CLOCKIFY_API_KEY}'`);
        Util.writeCache('workspaces', res);
      }

      return JSON.parse(res);
    };

    const getEntries = () =&gt; {
      const res =
        app.doShellScript(`curl --location --request GET '${CLOCKIFY_BASE_URL}/workspaces/${CLOCKIFY_WORKSPACE_ID}/user/${CLOCKIFY_USER_ID}/time-entries' \
    --header 'Cache-Control: no-cache' \
    --header 'Accept: application/json' \
    --header 'X-Api-Key: ${CLOCKIFY_API_KEY}'`);

      return JSON.parse(res);
    };

    const startTimer = () =&gt; {
      const res =
        app.doShellScript(`curl --location --request POST '${CLOCKIFY_BASE_URL}/workspaces/${CLOCKIFY_WORKSPACE_ID}/time-entries' \
    --header 'Cache-Control: no-cache' \
    --header 'Accept: application/json' \
    --header 'X-Api-Key: ${CLOCKIFY_API_KEY}' \
    --header 'Content-Type: application/json' \
    --data-raw '{
        "start": "${new Date().toISOString()}"
    }'`);

      return JSON.parse(res);
    };

    const stopTimer = (projectId = null, description = null) =&gt; {
      // get ongoing entry
      const ongoing = getEntries()[0];

      // timer already stopped
      if (!!ongoing.timeInterval.end) return {};

      // update entry details before stopping -- cannot do in one request
      let res =
        app.doShellScript(`curl --location --request PUT '${CLOCKIFY_BASE_URL}/workspaces/${CLOCKIFY_WORKSPACE_ID}/time-entries/${
          ongoing.id
        }' \
    --header 'Cache-Control: no-cache' \
    --header 'Accept: application/json' \
    --header 'X-Api-Key: ${CLOCKIFY_API_KEY}' \
    --header 'Content-Type: application/json' \
    --data-raw '{
        "start": "${ongoing.timeInterval.start}",
        "projectId": ${projectId ? `"${projectId}"` : 'null'},
        "description":  ${
          description ? `"${description.replace("'", "\\'")}"` : 'null'
        }
    }'`);

      // end timer/entry
      res =
        app.doShellScript(`curl --location --request PATCH '${CLOCKIFY_BASE_URL}/workspaces/${CLOCKIFY_WORKSPACE_ID}/user/${CLOCKIFY_USER_ID}/time-entries' \
    --header 'Cache-Control: no-cache' \
    --header 'Accept: application/json' \
    --header 'X-Api-Key: ${CLOCKIFY_API_KEY}' \
    --header 'Content-Type: application/json' \
    --data-raw '{
        "end": "${new Date().toISOString()}"
    }'`);
      return JSON.parse(res);
    };

    const discardTimer = () =&gt; {
      const ongoing = getEntries()[0];

      if (!!ongoing.timeInterval.end) return false;

      app.doShellScript(`curl --location --request DELETE '${CLOCKIFY_BASE_URL}/workspaces/${CLOCKIFY_WORKSPACE_ID}/time-entries/${ongoing.id}' \
      --header 'Cache-Control: no-cache' \
      --header 'Accept: application/json' \
      --header 'X-Api-Key: ${CLOCKIFY_API_KEY}' \
      --header 'Content-Type: application/json'`);

      return true;
    };

    const getClients = (refresh = false) =&gt; {
      let res = Util.readCache('clients');

      if (refresh || !res) {
        res =
          app.doShellScript(`curl --location --request GET '${CLOCKIFY_BASE_URL}/workspaces/${CLOCKIFY_WORKSPACE_ID}/clients' \
    --header 'Cache-Control: no-cache' \
    --header 'Accept: application/json' \
    --header 'X-Api-Key: ${CLOCKIFY_API_KEY}'`);

        Util.writeCache('clients', res);
      }

      return typeof res === 'object' ? res : JSON.parse(res);
    };

    const getClientProjects = (clientId, refresh = false) =&gt; {
      const cacheKey = `projects-${clientId}`;
      let res = Util.readCache(cacheKey);

      if (refresh || !res) {
        res =
          app.doShellScript(`curl --location --request GET '${CLOCKIFY_BASE_URL}/workspaces/${CLOCKIFY_WORKSPACE_ID}/projects?clients=${clientId}' \
        --header 'Cache-Control: no-cache' \
        --header 'Accept: application/json' \
        --header 'X-Api-Key: ${CLOCKIFY_API_KEY}'`);

        Util.writeCache(cacheKey, res);
      }

      return typeof res === 'object' ? res : JSON.parse(res);
    };

    return {
      getUser,
      getWorkspaces,
      getEntries,
      startTimer,
      stopTimer,
      discardTimer,
      getClients,
      getClientProjects,
    };
  };

  const Alfred = {
    setEnv: (key, value) =&gt; {
      const prefs = Alfred.var('preferences');
      const workflowUid = Alfred.var('workflow_uid');
      const workflowDir = `${prefs}/workflows/${workflowUid}`;

      return Application('System Events')
        .propertyListFiles.byName(`${workflowDir}/info.plist`)
        .propertyListItems.byName('variables')
        .propertyListItems.byName(key)
        .value.set(value);
    },

    error: (message) =&gt;
      app.displayNotification(message, {
        soundName: 'Pop',
        withTitle: 'Clockify',
      }),

    info: (message) =&gt;
      app.displayNotification(message, {
        soundName: 'Hero',
        withTitle: 'Clockify',
      }),

    invoke: (trigger, arg = '') =&gt; {
      Application('Alfred').runTrigger(trigger, {
        inWorkflow: Alfred.var('workflow_bundleid'),
        withArgument: typeof arg === 'string' ? arg : JSON.stringify(arg),
      });
    },

    dismiss: () =&gt; Alfred.invoke('dismiss'),

    var: (name) =&gt; app.systemAttribute(`alfred_${name}`) || '',

    getActivity: () =&gt; {
      return Alfred.var('activity');
    },

    /**
     * Use the current query to search through items using a fuzzy algorithm.
     * @param {Array} items The items to be searched/filtered.
     * @param {string} QUERY The ongoing query.
     * @param {string|Array&lt;string&gt;} keys For Array&lt;Object&gt; in `items`, the object query when searching.
     * @returns Array
     */
    fuzzySearch: (items, keys = []) =&gt;
      items.filter((item) =&gt;
        QUERY.split(/\s/g).every(
          (word) =&gt;
            !!(
              typeof item === 'object'
                ? [keys]
                    .flat()
                    .map((key) =&gt; item[key])
                    .join(' ')
                : item
            ).match(new RegExp(`${word}`, 'gi')),
        ),
      ),

    /**
     * Make an array of objects for Alfred's filter mechanism.
     * @param {Array} arr The array of items to use.
     * @param {string} varNameToSet The variable to persist on commit.
     * @param {string} nextActivity The next activity to run on commit.
     * @param {string} titleKey For Array&lt;Object&gt;, the key to use for `title`.
     * @param {string} valueKey For Array&lt;Object&gt;, the key to use for variable values.
     * @param {string} subtitleKey For Array&lt;Object&gt;, the key to use for `subtitle`.
     * @returns Array
     */
    makeFilterItems: (
      arr,
      varNameToSet,
      nextActivity,
      titleKey = '',
      valueKey = '',
      subtitleKey = null,
    ) =&gt; {
      if (!arr.length) return [];

      const make = (what) =&gt;
        typeof arr[0] === 'object'
          ? (item) =&gt; item[eval(`${what}Key;`)]
          : (item) =&gt; item;

      return arr.map((item) =&gt;
        Object.assign(
          {
            title: make('title')(item),
            variables: {
              [`alfred_${varNameToSet}`]: make('value')(item),
              alfred_activity: nextActivity,
            },
          },
          subtitleKey ? { subtitle: make('subtitle')(item) } : {},
        ),
      );
    },

    /**
     * Create an instructions/prompt list item.
     * @param {string} title The instruction title.
     * @param {string} subtitle The instruction subtitle
     * @returns Object
     */
    makeInstructions: (title, subtitle = '') =&gt; ({
      title,
      subtitle,
      valid: false,
    }),

    /**
     * Prompt the user for text input.
     * @param {*} QUERY The ongoing query object.
     * @param {*} varNameToSet The variable to persist.
     * @param {*} nextActivity The next activity to run on commit.
     * @param {*} title The prompt title.
     * @param {*} subtitle The prompt subtitle.
     * @returns Object
     */
    makeTextPrompt: (varNameToSet, nextActivity, title, subtitle = '') =&gt;
      Object.assign(Alfred.makeInstructions(title, subtitle), {
        match: QUERY,
        variables: {
          [`alfred_${varNameToSet}`]: QUERY,
          alfred_activity: nextActivity,
        },
        valid: !!QUERY,
      }),
  };

  const Activities = {
    install_user_id: () =&gt; {
      const user = Clockify().getUser();
      if ('id' in user)
        Alfred.info(
          'Clockify user environment variable has been set successfully.',
        );
      else return Alfred.error('Could not retrieve user using current API key');

      // clear workspaces cache
      Util.writeCache('workspaces', '');

      Alfred.setEnv('clockify_user_id', user.id);

      Alfred.dismiss();
    },

    install_workspace_id: () =&gt; {
      const workspaces = Clockify().getWorkspaces();

      let items = Alfred.fuzzySearch(workspaces, 'name');
      items = [
        Alfred.makeInstructions(
          'Select Workspace',
          'Choose the workspace to use with alfred-clockify.',
        ),
        ...Alfred.makeFilterItems(
          items,
          'workspace_id',
          'define_workspace_id',
          'name',
          'id',
        ),
      ];

      return { items };
    },

    define_workspace_id: () =&gt; {
      Alfred.setEnv('clockify_workspace_id', Alfred.var('workspace_id'));
      Alfred.info(
        'Clockify workspace environment variable has been set successfully.',
      );
      Alfred.dismiss();
    },

    create_time_entry: () =&gt; {
      Alfred.dismiss();

      const start = Clockify().startTimer();

      if ('id' in start) Alfred.info('New Clockify timer started.');
      else Alfred.error('New Clockify timer failed to start.');
    },

    pick_client: () =&gt; {
      let clients = Clockify().getClients();

      let items = Alfred.fuzzySearch(clients, 'name');
      items = [
        Alfred.makeInstructions(
          'Assign Client',
          'Choose the client to which the time entry belongs.',
        ),
        ...Alfred.makeFilterItems(
          items,
          'client_id',
          'pick_project',
          'name',
          'id',
        ),
      ];

      return { items };
    },

    pick_project: () =&gt; {
      let projects = Clockify().getClientProjects(Alfred.var('client_id'));

      let items = Alfred.fuzzySearch(projects, 'name');
      items = [
        Alfred.makeInstructions(
          'Assign Project',
          'Choose the project to which the time entry belongs.',
        ),
        ...Alfred.makeFilterItems(
          items,
          'project_id',
          'set_time_entry_description',
          'name',
          'id',
        ),
      ];

      return { items };
    },

    set_time_entry_description: () =&gt; {
      let items = [
        Alfred.makeTextPrompt(
          'time_entry_description',
          'end_ongoing_timer',
          'Assign Description',
          'Enter the description of the time entry.',
        ),
      ];

      return { items };
    },

    end_ongoing_timer: () =&gt; {
      Alfred.dismiss();

      const stop = Clockify().stopTimer(
        Alfred.var('project_id'),
        Alfred.var('time_entry_description'),
      );

      if ('id' in stop) Alfred.info('Ongoing Clockify timer ended.');
      else Alfred.error('Ongoing Clockify timer failed to end.');
    },

    discard_timer: () =&gt; {
      Alfred.dismiss();

      const discard = Clockify().discardTimer();
      if (!discard)
        return Alfred.error('No ongoing Clockify timer available for discard.');
      Alfred.info('Ongoing Clockify timer has been deleted.');
    },
  };

  return JSON.stringify(Activities[Alfred.getActivity()]());
}
</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string></string>
				<key>title</key>
				<string></string>
				<key>type</key>
				<integer>7</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>C7631B59-59C5-48D7-BDCD-CE281244A310</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argument</key>
				<string></string>
				<key>passthroughargument</key>
				<false/>
				<key>variables</key>
				<dict>
					<key>alfred_activity</key>
					<string>{query}</string>
				</dict>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.argument</string>
			<key>uid</key>
			<string>86275DEB-9881-46D9-8BB9-5D48C404F80F</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>availableviaurlhandler</key>
				<false/>
				<key>triggerid</key>
				<string>main</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.trigger.external</string>
			<key>uid</key>
			<string>4DB423FF-D11A-45B7-AF47-8075153B6ED6</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>availableviaurlhandler</key>
				<false/>
				<key>triggerid</key>
				<string>dismiss</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.trigger.external</string>
			<key>uid</key>
			<string>F01458AD-724F-400B-870E-C150BEF7A65B</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>type</key>
			<string>alfred.workflow.utility.hidealfred</string>
			<key>uid</key>
			<string>1BFA983B-0DAA-48E8-B7FC-4D6F31ACC952</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
	</array>
	<key>readme</key>
	<string>Quickly start and stop your Clockify timers from Alfred.</string>
	<key>uidata</key>
	<dict>
		<key>1BFA983B-0DAA-48E8-B7FC-4D6F31ACC952</key>
		<dict>
			<key>note</key>
			<string>Hide</string>
			<key>xpos</key>
			<real>245</real>
			<key>ypos</key>
			<real>350</real>
		</dict>
		<key>48B7B2A7-399C-4114-85B9-D89B08E8E27B</key>
		<dict>
			<key>note</key>
			<string>Primary Entrypoint</string>
			<key>xpos</key>
			<real>30</real>
			<key>ypos</key>
			<real>30</real>
		</dict>
		<key>4DB423FF-D11A-45B7-AF47-8075153B6ED6</key>
		<dict>
			<key>note</key>
			<string>Loop Re-entry</string>
			<key>xpos</key>
			<real>30</real>
			<key>ypos</key>
			<real>175</real>
		</dict>
		<key>7126AC35-6A8B-4814-9C32-C4B62778DBFD</key>
		<dict>
			<key>note</key>
			<string>Recursion</string>
			<key>xpos</key>
			<real>620</real>
			<key>ypos</key>
			<real>30</real>
		</dict>
		<key>86275DEB-9881-46D9-8BB9-5D48C404F80F</key>
		<dict>
			<key>note</key>
			<string>Set Activity</string>
			<key>xpos</key>
			<real>245</real>
			<key>ypos</key>
			<real>60</real>
		</dict>
		<key>C7631B59-59C5-48D7-BDCD-CE281244A310</key>
		<dict>
			<key>note</key>
			<string>Activities Loop</string>
			<key>xpos</key>
			<real>445</real>
			<key>ypos</key>
			<real>30</real>
		</dict>
		<key>F01458AD-724F-400B-870E-C150BEF7A65B</key>
		<dict>
			<key>note</key>
			<string>Exit Workflow</string>
			<key>xpos</key>
			<real>30</real>
			<key>ypos</key>
			<real>320</real>
		</dict>
	</dict>
	<key>userconfigurationconfig</key>
	<array/>
	<key>variables</key>
	<dict>
		<key>clockify_api_key</key>
		<string>ZTZmNWU0NTgtYzIxNi00NzZmLWFkODktZTIwMGE1ZTFlZjdh</string>
		<key>clockify_user_id</key>
		<string>6155cd9f87333d18b79da808</string>
		<key>clockify_workspace_id</key>
		<string>5e60e409a98fe8231e35a1ec</string>
	</dict>
	<key>variablesdontexport</key>
	<array>
		<string>clockify_user_id</string>
		<string>clockify_api_key</string>
		<string>clockify_workspace_id</string>
	</array>
	<key>version</key>
	<string>1.0.0</string>
	<key>webaddress</key>
	<string>https://github.com/stephancasas/alfred-clockify</string>
</dict>
</plist>
